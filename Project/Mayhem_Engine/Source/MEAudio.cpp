/*********************************************************************************************************************/
/*!
  \file              MEAudio.cpp
  \author            Cameron Myers
  \par               Email: cameron.myers\@digipen.edu
  \par               Course: GAM200
  \par               Copyright © 2022 DigiPen, All rights reserved.

  \brief
    This is the main file for the Wwise© Implementation
    Credit: AudioKinetic https://www.audiokinetic.com/fr/library/edge/?source=SDK&id=index.html
 */
 /*********************************************************************************************************************/

/*********************************************************************************************************************/
/* Includes */
/*********************************************************************************************************************/
#include <MEAudio.h>
#include <Log.h>

#include <../Mayhem_Wwise/Banks/Wwise_IDs.h> // IDs generated by Wwise
#include <SoundEngine/Common/AkQueryParameters.h>
#include "Plugin/AkSilenceSourceFactory.h"
#include "Component.h"
#include "GameObject.h"

CAkFilePackageLowLevelIOBlocking g_lowLevelIO;

/*Variables for the banks*/
AkBankID init_bankID;
AkBankID master_bankID;

/*game objects*/
const AkGameObjectID universalGOID = 1;
/*listener objects*/
const AkGameObjectID listenerGOID = 2;

float MEAudio::main_volume;
float MEAudio::sfx_volume;
std::vector<AkGameObjectID>MEAudio::MEAudioEmitters;
std::vector<AkGameObjectID>MEAudio::MEAudioListeners;

static bool isMuted = false;



/*!********************************************************************************************************************
    \brief
        Initializes all the systems of Wwise
    \return
        if the function was successful
**********************************************************************************************************************/
bool MEAudio::Init()
{
    /*Initialize the Memory manager*/
    AkMemSettings memSettings;
    AK::MemoryMgr::GetDefaultSettings(memSettings);

    if (AK::MemoryMgr::Init(&memSettings) != AK_Success)
    {
        ME_CORE_ERROR("Wwise: Could not create the Memory Manager!");
        assert(!"Could not create the memory manager.");
        return false;
    }
    ME_CORE_INFO("Wwise: Memory Manager created");


    /*Initialize the Stream Manager*/
    AkStreamMgrSettings stmSettings;
    AK::StreamMgr::GetDefaultSettings(stmSettings);

    // Customize the Streaming Manager settings here.

    if (!AK::StreamMgr::Create(stmSettings))
    {
        ME_CORE_ERROR("Wwise: Could not create the Streaming Manager!");
        assert(!"Could not create the Streaming Manager");
        return false;
    }
    ME_CORE_INFO("Wwise: Streaming Manager created");


    /* Create a streaming device */
    AkDeviceSettings deviceSettings;
    AK::StreamMgr::GetDefaultDeviceSettings(deviceSettings);

    // Customize the streaming device settings here.

    // in the Stream Manager, and registers itself as the File Location Resolver.

    if (g_lowLevelIO.Init(deviceSettings) != AK_Success)
    {
        ME_CORE_ERROR("Could not create the streaming device and Low-Level I/O system");
        assert(!"Could not create the streaming device and Low-Level I/O system");
        return false;
    }
    ME_CORE_INFO("Wwise: Streaming Device created");


    /*Initialize the Sound Engine*/
    AkInitSettings initSettings;
    AkPlatformInitSettings platformInitSettings;
    AK::SoundEngine::GetDefaultInitSettings(initSettings);
    AK::SoundEngine::GetDefaultPlatformInitSettings(platformInitSettings);

    if (AK::SoundEngine::Init(&initSettings, &platformInitSettings) != AK_Success)
    {
        ME_CORE_ERROR("Could not initialize the Sound Engine.");
        assert(!"Could not initialize the Sound Engine.");
        return false;
    }
    ME_CORE_INFO("Wwise: Sound Engine Initialized");


    /*Initialize the Music Engine*/
    AkMusicSettings musicInit;
    AK::MusicEngine::GetDefaultInitSettings(musicInit);

    if (AK::MusicEngine::Init(&musicInit) != AK_Success)
    {
        ME_CORE_ERROR("Could not initialize the Music Engine.");
        assert(!"Could not initialize the Music Engine.");
        return false;
    }
    ME_CORE_INFO("Wwise: Music Engine Initialized");


    /*Initialize Communications (shouldn't happen in release mode)*/
#ifndef AK_OPTIMIZED

    AkCommSettings commSettings;
    AK::Comm::GetDefaultInitSettings(commSettings);
    if (AK::Comm::Init(commSettings) != AK_Success)
    {
        ME_CORE_ERROR("Could not initialize communication.");
        assert(!"Could not initialize communication.");
        return false;
    }
    ME_CORE_INFO("Wwise: Communication Initialized");

#endif // AK_OPTIMIZED

    return true;
}

/*!********************************************************************************************************************
    \brief
        Loads audio banks for the audio engine
    \todo this needs to be fully serialized one audio clips play

**********************************************************************************************************************/
void MEAudio::Load()
{
    /*Set base path for the banks*/

#ifdef _DEBUG
    g_lowLevelIO.SetBasePath(AKTEXT("../Mayhem_Wwise/Banks"));
#endif // _DEBUG


#ifdef _DISTRIBUTE
    g_lowLevelIO.SetBasePath(AKTEXT("./Mayhem_Wwise/Banks"));
#endif // _DISTRIBUTE


    AK::StreamMgr::SetCurrentLanguage(AKTEXT("English(US)"));

    /*!
     *\sa <a href="https://www.audiokinetic.com/fr/library/edge/?source=SDK&id=concept_banks.html">Wwise Audio Banks</a>
     *
     */
    AkBankID bankID;/*not used maybe?*/

    AKRESULT eResult = AK::SoundEngine::LoadBank("Init.bnk", bankID);
    assert(eResult == AK_Success);

    eResult = AK::SoundEngine::LoadBank("Main.bnk", bankID);
    assert(eResult == AK_Success);



    /*!Loading Game Objects
     *\sa <a href = "https://www.audiokinetic.com/fr/library/edge/?source=SDK&id=concept_gameobjects.html"> Wwise Game Object</a>
     *
     */

     /*register the first GO, which becomes the listener*/
    AkGameObjectID DEFAULT_LISTENER;
    AkGameObjectID DEFAULT_EMITTER;

    //make default listener
    MEAudioListeners.insert(MEAudioListeners.begin(), DEFAULT_LISTENER);
    DEFAULT_LISTENER = MEAudioListeners.size();
    AK::SoundEngine::RegisterGameObj(DEFAULT_LISTENER, "Default Listener");
    AK::SoundEngine::SetDefaultListeners(&DEFAULT_LISTENER, 1);

    //make default emitter
    MEAudioEmitters.insert(MEAudioEmitters.begin(), DEFAULT_EMITTER);
    DEFAULT_EMITTER = MEAudioEmitters.size();
    AK::SoundEngine::RegisterGameObj(DEFAULT_EMITTER, "Default Emitter");

    //parameter crap
    AkRtpcValue musicVol = 0;
    AkRtpcValue sfxVol = 0;
	AK::SoundEngine::Query::RTPCValue_type rtpc_type = AK::SoundEngine::Query::RTPCValue_Global;

    //get the values
	AK::SoundEngine::Query::GetRTPCValue((AkRtpcID)AK::GAME_PARAMETERS::MUSIC_VOLUME, AK_INVALID_GAME_OBJECT, AK_INVALID_PLAYING_ID, musicVol, rtpc_type);
    AK::SoundEngine::Query::GetRTPCValue((AkRtpcID)AK::GAME_PARAMETERS::SFX_VOLUME, AK_INVALID_GAME_OBJECT, AK_INVALID_PLAYING_ID, sfxVol, rtpc_type);

    //set the actual values
    main_volume = musicVol;
    sfx_volume = sfxVol;

}

/*!********************************************************************************************************************
    \brief
        Updates the audio engine
**********************************************************************************************************************/
void MEAudio::Update()
{

    AK::SoundEngine::RenderAudio();
}

/*!********************************************************************************************************************
    \brief
        Shuts down the audio engine

**********************************************************************************************************************/
void MEAudio::Shutdown()
{
    /*frees the wwise GOs*/
    AK::SoundEngine::UnregisterAllGameObj();
    ME_CORE_INFO("MEAudio: Unloaded Wwise Game Objects");

    MEAudioEmitters.clear();
    MEAudioListeners.clear();
    MEAudioEmitters.shrink_to_fit();
    MEAudioListeners.shrink_to_fit();

    AK::SoundEngine::ClearBanks();
    ME_CORE_INFO("MEAudio: Uloaded all Wwise sound banks");

#ifndef AK_OPTIMIZED
    //

    // Terminate Communication Services

    //
    //
    AK::Comm::Term();
    ME_CORE_INFO("MEAudio: Terminated Wwise Communication Services");

#endif // AK_OPTIMIZED

    AK::MusicEngine::Term();
    ME_CORE_INFO("MEAudio: Terminated Wwise Music Engine");
    AK::SoundEngine::Term();
    ME_CORE_INFO("MEAudio: Terminated Wwise Sound Engine");

    g_lowLevelIO.Term();
    ME_CORE_INFO("MEAudio: Terminated Wwise Low Level IO");

    if (AK::IAkStreamMgr::Get())
    {
        AK::IAkStreamMgr::Get()->Destroy();
        ME_CORE_INFO("MEAudio: Terminated Wwise Stream Manager");

    }
    AK::MemoryMgr::Term();
    ME_CORE_INFO("MEAudio: Terminated Wwise Memory Manager");



}

/**
 * \brief This builds the emitter and listener for each audio component
 * \param audio audio component to build
 */
void MEAudio::Build(Audio* audio)
{
    //make the listener
    audio->SetListener(MEAudioListeners.size()+1);
    MEAudioListeners.insert(MEAudioListeners.end(), *(audio->GetListener()));
    AK::SoundEngine::RegisterGameObj(*(audio->GetListener()), "Listener");

    //make the emitter
    audio->SetEmitter(MEAudioEmitters.size() + 1);
    MEAudioEmitters.insert(MEAudioEmitters.end(), *(audio->GetEmitter()));
    AK::SoundEngine::RegisterGameObj(*(audio->GetEmitter()), "Emitter");

}

/**
 * \brief Sets the main volume
 * \param val volume from 0.0 - 100.0
 */
void MEAudio::SetMusicVolume(float val)
{
    MEAudio::main_volume = val;
    AK::SoundEngine::SetRTPCValue(AK::GAME_PARAMETERS::MUSIC_VOLUME, val);
}

/**
 * \brief Sets the SFX groups volume
 * \param val volume from 0.0 - 100.0
 */
void MEAudio::SetSFXVolume(float val)
{
    MEAudio::sfx_volume = val;
    AK::SoundEngine::SetRTPCValue(AK::GAME_PARAMETERS::SFX_VOLUME, val);

}

/**
 * \brief Toggles between muted and unmuted
 * \return resulting mute state
 */
bool MEAudio::ToggleMute()
{
    isMuted ^= true;

    //restore music volume
    AK::SoundEngine::SetRTPCValue(AK::GAME_PARAMETERS::MUSIC_VOLUME, static_cast<float>(!isMuted) * MEAudio::main_volume);
    //restore sfx volume
    AK::SoundEngine::SetRTPCValue(AK::GAME_PARAMETERS::SFX_VOLUME, static_cast<float>(!isMuted) * MEAudio::sfx_volume);

    return isMuted;
}

void MEAudio::MuteAll()
{
    isMuted = true;

    //restore music volume
    AK::SoundEngine::SetRTPCValue(AK::GAME_PARAMETERS::MUSIC_VOLUME, 0);
    //restore sfx volume
    AK::SoundEngine::SetRTPCValue(AK::GAME_PARAMETERS::SFX_VOLUME, 0);

}

void MEAudio::UnMuteAll()
{
    isMuted = false;

    //restore music volume
    AK::SoundEngine::SetRTPCValue(AK::GAME_PARAMETERS::MUSIC_VOLUME, MEAudio::main_volume);
    //restore sfx volume
    AK::SoundEngine::SetRTPCValue(AK::GAME_PARAMETERS::SFX_VOLUME, MEAudio::sfx_volume);

}

AkGameObjectID MEAudio::GetUniversalEmitter()
{
	return universalGOID;
}

AkGameObjectID MEAudio::GetUniversalListener()
{
	return listenerGOID;
}
