#pragma once
/*********************************************************************************************************************/
/*!
  \file              MEAudio.h
  \author            Cameron Myers
  \par               Email: cameron.myers\@digipen.edu
  \par               Course: GAM200
  \par               Copyright © 2022 DigiPen, All rights reserved.

  \brief
	This is the main file for the Wwise© Implementation
 */
 /*********************************************************************************************************************/


/*********************************************************************************************************************/
/* Includes */
/*********************************************************************************************************************/
#include <string>

//CHANGE THIS, THIS IS ONLY FOR THE SAMPLE SOUND BANKS
#include <../Mayhem_Wwise/Banks/Wwise_IDs.h> // IDs generated by Wwise

//initializing the sound engine
#include <AK/SoundEngine/Common/AkSoundEngine.h>

//for the memory manager
#include <AK/SoundEngine/Common/AkMemoryMgr.h>                  // Memory Manager interface
#include <AK/SoundEngine/Common/AkModule.h>                     // Default memory manager

//for asserting
#include <assert.h>

//for the stream manager
#include <AK/SoundEngine/Common/IAkStreamMgr.h>
#include <AK/Tools/Common/AkPlatformFuncs.h>

//low level io for the stream manager
#include <AK/Win32/AkFilePackageLowLevelIOBlocking.h>

//for the interactive music feature
#include <vector>
#include <AK/MusicEngine/Common/AkMusicEngine.h>

//debug mode thing
#ifndef _DISTRIBUTE
	#include <Comm/AkCommunication.h>
#endif

#ifndef AK_OPTIMIZED
#include <AK/Comm/AkCommunication.h>
#endif // AK_OPTIMIZED

#include "Audio.h"

class GameObject;

class MEAudio
{
public:
	static bool Init();

	static void Load();

	static void Update();

	static void Shutdown();

	static void Build(Audio* audio);

	static void SetMusicVolume(float val);
	static void SetSFXVolume(float val);
	static bool ToggleMute();
	static void UnMuteAll();
	static void MuteAll();

	static AkGameObjectID GetUniversalEmitter();
	static AkGameObjectID GetUniversalListener();


	private:

	//static void LoadBanks();
	static float main_volume;
	static float sfx_volume;

	static AkOSChar* basepath;

	static AkOSChar* language;

	static std::vector<char*> banks;

	static std::vector<AkGameObjectID>MEAudioEmitters;
	static std::vector<AkGameObjectID>MEAudioListeners;

	

};
